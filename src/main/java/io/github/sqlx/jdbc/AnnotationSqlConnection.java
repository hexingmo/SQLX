/*
 *    Copyright 2023 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package io.github.sqlx.jdbc;

import io.github.sqlx.sql.parser.AnnotationSqlHintParser;
import io.github.sqlx.sql.parser.SqlHint;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author He Xing Mo
 * @since 1.0
 */
public class AnnotationSqlConnection extends ConnectionAdapter {

    private final AnnotationSqlHintParser parser;

    public AnnotationSqlConnection(Connection delegate , AnnotationSqlHintParser parser) {
        super(delegate);
        this.parser = parser;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new AnnotationSqlStatement(super.createStatement() , parser);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new AnnotationSqlStatement(super.createStatement(resultSetType, resultSetConcurrency) , parser);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new AnnotationSqlStatement(super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql)) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql), resultSetType, resultSetConcurrency) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql), resultSetType, resultSetConcurrency, resultSetHoldability) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql), autoGeneratedKeys) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql), columnIndexes) , parser);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new AnnotationSqlPreparedStatement(super.prepareStatement(getNativeSql(sql), columnNames) , parser);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return new AnnotationSqlCallableStatement(super.prepareCall(getNativeSql(sql)) , parser);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new AnnotationSqlCallableStatement(super.prepareCall(getNativeSql(sql), resultSetType, resultSetConcurrency) , parser);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new AnnotationSqlCallableStatement(super.prepareCall(getNativeSql(sql), resultSetType, resultSetConcurrency, resultSetHoldability) , parser);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return super.nativeSQL(getNativeSql(sql));
    }

    private String getNativeSql(String sql) {
        SqlHint hint = parser.parse(sql);
        return hint.getNativeSql();
    }
}
